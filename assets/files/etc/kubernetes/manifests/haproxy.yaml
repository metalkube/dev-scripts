---
kind: Pod
apiVersion: v1
metadata:
  name: haproxy
  namespace: openshift-kni-infra
  creationTimestamp:
  deletionGracePeriodSeconds: 65
  labels:
    app: kni-infra-api-lb
spec:
  volumes:
  - name: resource-dir
    hostPath:
      path: "/etc/kubernetes/static-pod-resources/haproxy"
  - name: kubeconfig
    hostPath:
      path: "/etc/kubernetes/kubeconfig"
  - name: run-dir
    empty-dir: {}
  - name: conf-dir
    empty-dir: {}
  - name: chroot-host
    hostPath:
      path: "/"
  initContainers:
  - name: clusterrc-generation
    image: quay.io/openshift-metalkube/kubeconfig-extractor:latest
    command:
    - "/usr/bin/kubeconfig-extractor"
    args:
    - "/etc/kubernetes/kubeconfig"
    - "/etc/kubernetes/static-pod-resources/clusterrc"
    resources: {}
    volumeMounts:
    - name: resource-dir
      mountPath: "/etc/kubernetes/static-pod-resources"
    - name: kubeconfig
      mountPath: "/etc/kubernetes/kubeconfig"
  - name: render-haproxy-cfg
    image: quay.io/openshift/origin-node:latest
    env:
    - name: api_port
      value: "6443"
    - name: stat_port
      value: "50000"
    command:
    - "/bin/bash"
    - "-c"
    - |
      #/bin/bash
      set -ex

      source /etc/kubernetes/static-pod-resources/clusterrc
      source /etc/kubernetes/static-pod-resources/utils.sh
      generate_cfg \
          /etc/kubernetes/static-pod-resources/haproxy.cfg.template \
          /etc/haproxy/haproxy.cfg \
          "$DOMAIN" \
          "$api_port" \
          "$stat_port"
    resources: {}
    volumeMounts:
    - name: resource-dir
      mountPath: "/etc/kubernetes/static-pod-resources"
    - name: conf-dir
      mountPath: "/etc/haproxy"
    imagePullPolicy: IfNotPresent
  containers:
  - name: haproxy
    image: quay.io/openshift/origin-haproxy-router:latest
    command:
    - "/bin/bash"
    - "-c"
    - |
      #/bin/bash
      reload_haproxy()
      {
        old_pids=$(pidof haproxy)
        if [ -n "$old_pids" ]; then
            /usr/sbin/haproxy -W -db -f /etc/haproxy/haproxy.cfg  -p /var/lib/haproxy/run/haproxy.pid -x /var/lib/haproxy/run/haproxy.sock -sf $old_pids &
        else
            /usr/sbin/haproxy -W -db -f /etc/haproxy/haproxy.cfg  -p /var/lib/haproxy/run/haproxy.pid &
        fi
      }

      msg_handler()
      {
        while read -r line; do
            echo "The client send: $line"  >&2
            # currently only 'reload' msg is supported
            if [ "$line" = reload ]; then
                reload_haproxy
            fi
        done
      }

      set -ex
      declare -r haproxy_sock="/var/run/haproxy/haproxy-master.sock"
      export -f msg_handler
      export -f reload_haproxy
      if [ -S "$haproxy_sock" ]; then
          rm "$haproxy_sock"
      fi

      /usr/sbin/haproxy -W -db -f /etc/haproxy/haproxy.cfg  -p /var/lib/haproxy/run/haproxy.pid &
      socat UNIX-LISTEN:${haproxy_sock},fork system:'bash -c msg_handler'
    volumeMounts:
    - name: conf-dir
      mountPath: "/etc/haproxy"
    - name: run-dir
      mountPath: "/var/run/haproxy"
    terminationMessagePolicy: FallbackToLogsOnError
    imagePullPolicy: IfNotPresent
  - name: haproxy-monitor
    securityContext:
      privileged: true
    image: quay.io/openshift/origin-node:latest
    env:
    - name: cfg_path
      value: "/etc/haproxy/haproxy.cfg"
    - name: api_port
      value: "6443"
    - name: lb_port
      value: "7443"
    - name: stat_port
      value: "50000"
    command:
    - "/bin/bash"
    - "-c"
    - |
      #/bin/bash
      set -ex

      source /etc/kubernetes/static-pod-resources/clusterrc
      source /etc/kubernetes/static-pod-resources/utils.sh
      API_VIP="$(dig +noall +answer "api.${DOMAIN}" | awk '{print $NF}')"

      trap clean_prerouting_rules SIGINT SIGTERM
      while true; do
          sleep 15
          if has_master_api_lb_topology_changed "$DOMAIN" "$cfg_path"; then
              (>&2 echo "Master topology changed. Reconfiguring and hot restarting HAProxy")
              generate_cfg \
                  /etc/kubernetes/static-pod-resources/haproxy.cfg.template \
                  "$cfg_path" \
                  "$DOMAIN" \
                  "$api_port" \
                  "$stat_port"
              echo "reload" | socat /var/run/haproxy/haproxy-master.sock -
          fi
          if curl -o /dev/null -kLs "https://0:${lb_port}/healthz"; then
              (>&2 echo "API is accessible via LB")
              ensure_prerouting_rules "$API_VIP" "$api_port" "$lb_port"
          fi
      done
    volumeMounts:
    - name: conf-dir
      mountPath: "/etc/haproxy"
    - name: run-dir
      mountPath: "/var/run/haproxy"
    - name: resource-dir
      mountPath: "/etc/kubernetes/static-pod-resources"
    - name: chroot-host
      mountPath: "/host"
    terminationMessagePolicy: FallbackToLogsOnError
    imagePullPolicy: IfNotPresent
  hostNetwork: true
  tolerations:
  - operator: Exists
  priorityClassName: system-node-critical
status: {}
